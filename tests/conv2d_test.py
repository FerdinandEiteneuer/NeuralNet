'''
Trains the neural numpy net with mnist data.
'''

import numpy as np
import sys
import os

from neuralnet.network import Sequential
from neuralnet.dense import Dense
from neuralnet.activations import relu, sigmoid, linear, tanh, softmax, lrelu
from neuralnet.loss_functions import mse, crossentropy
from neuralnet.optimizers import SGD, Nadam
from neuralnet.regularizers import L1, L2, L1_L2
from neuralnet.kernel_initializers import normal, glorot_uniform
from neuralnet.conv2d import Flatten, Conv2D
from neuralnet.data import load_mnist

np.set_printoptions(linewidth=120, precision=2, suppress=True)
DTYPE = np.float64

correct_out = """
[[[[ 0.7   0.17  8.41  5.46]
   [-3.36  0.06 -0.77  2.02]]

  [[ 0.71  2.02  3.51 -2.25]
   [-0.09 -2.51  2.77  4.8 ]]

  [[ 7.48 13.71 -2.09 -0.55]
   [ 5.06 -1.29  4.18  2.74]]

  [[ 5.59  2.27  2.85 -3.99]
   [-2.22 -0.96  1.96 -1.83]]

  [[ 5.25  9.81  0.11 -7.12]
   [ 5.38  6.97 -3.75  0.39]]]


 [[[ 8.36 -4.85  1.44 -2.95]
   [ 3.62 -1.08 -5.59 -2.34]]

  [[-5.46  1.9   1.31 -3.77]
   [ 4.85 -1.95  1.16  9.02]]

  [[ 3.18 -4.77 -2.69  5.58]
   [ 2.23  1.75 -2.57  5.45]]

  [[ 1.03  2.87  8.93 -3.7 ]
   [-1.5   0.87  7.47  2.12]]

  [[ 5.6   2.15  0.49  1.08]
   [ 1.8   8.29 -4.56  4.69]]]


 [[[-6.05  5.6   3.52  7.43]
   [-3.63  2.19  5.25  5.42]]

  [[13.33 -0.7  -3.75 -7.14]
   [ 3.49  3.16  7.64  0.69]]

  [[ 1.88 -0.2  -2.61 17.91]
   [ 1.97 -3.28  1.8   6.05]]

  [[-3.43  3.81  5.68  4.49]
   [ 2.26  3.95  3.27 -2.41]]

  [[-0.26  5.57  1.5  -2.27]
   [ 1.13  4.81 -1.21 -2.76]]]


 [[[ 3.61  4.34  0.24 -0.41]
   [ 0.61 -1.79 -3.72  5.9 ]]

  [[-2.48  3.85  5.29  4.68]
   [-2.1  -2.51 -4.55  1.82]]

  [[ 0.71  0.84  6.01 -0.16]
   [ 7.51 -2.25 -3.39 -7.31]]

  [[-1.82  8.24  6.72  5.03]
   [ 1.55  5.3   6.32 -1.4 ]]

  [[ 0.24  5.44  4.96  0.82]
   [ 3.2   4.28 -0.29 -5.89]]]


 [[[-3.74  2.79  3.59  2.47]
   [ 3.41 -2.28  3.51 -1.07]]

  [[-0.4   3.28 -1.12  4.17]
   [ 9.08  4.53 -6.1   1.61]]

  [[-3.35 -4.87  3.77  0.02]
   [ 4.57 -1.97 -3.34 -1.45]]

  [[ 5.45  5.38  0.75  0.84]
   [ 6.01  1.74 -2.5   4.81]]

  [[-1.61 -0.52  2.57 -1.65]
   [-3.83  2.63 -2.33 -3.76]]]]
"""

correct_dout = """
[[[[  2.02  -0.09  -2.23   2.45]
   [  0.34  -3.11  -0.33   0.44]
   [  1.17   0.73  -2.34  -1.29]]

  [[  1.32  -1.28   1.06   0.21]
   [  7.67  -0.42  -4.34   0.16]
   [  1.43   1.56   2.5   -0.84]]

  [[ -3.15   0.73  -1.51  -0.71]
   [  1.58  -3.16  -1.27  -4.93]
   [ -4.54   1.08  -0.74   1.41]]

  [[  3.24  -1.51   0.45  -1.06]
   [  5.02  -0.69   2.05   1.83]
   [  5.31  -0.99  -2.39  -0.75]]

  [[ -4.01   3.49   1.71  -1.77]
   [ -1.7    3.72   0.05  -2.35]
   [ -1.87   1.    -1.17  -0.25]]]


 [[[  1.72   1.54  -2.9   -1.73]
   [ -1.93  -5.12   0.78   0.11]
   [  2.35   2.2    2.1   -0.41]]

  [[ -0.71   2.65   3.85  -0.75]
   [ -9.87   3.48   0.14  -0.58]
   [ -1.66  -0.77   2.81   0.84]]

  [[ -5.32   0.82   1.93   0.67]
   [  3.53 -10.54   1.04   0.18]
   [ -7.44  -0.04  -1.77  -0.83]]

  [[  0.78  -9.22   2.49   0.59]
   [  0.74  -1.08   6.1    2.54]
   [ -7.71  -2.31  -3.33  -1.5 ]]

  [[ -2.19   1.64   0.72  -2.4 ]
   [ -3.43  -3.26   0.1   -3.84]
   [  5.89   5.87   0.26   0.36]]]


 [[[ -0.83   3.17   1.38  -0.03]
   [ -0.58  -0.02  -3.54   3.29]
   [ -1.74   1.81  -1.52  -3.03]]

  [[  2.82   6.17   3.12   2.11]
   [  0.66  -1.97  -0.05  -2.76]
   [  8.25   2.46  -2.32  -2.27]]

  [[ -1.26  -2.77  -3.16  -0.3 ]
   [  1.89  -7.38   4.19  -1.91]
   [  1.07  -1.33   0.76   0.41]]

  [[ -1.13  -6.42   2.62  -0.92]
   [ -0.64  -1.75  -7.6   -3.87]
   [ -6.94  -6.19  10.2   -2.49]]

  [[ -3.56   2.66  -2.99  -2.25]
   [ -2.87  -0.61   1.64  -2.98]
   [ -0.27  -7.52  -1.69   0.51]]]


 [[[ -0.34  -2.97   1.09   0.27]
   [ -7.13   7.08   3.34  -1.59]
   [ 10.71  -5.02   0.89   1.64]]

  [[ -2.77   4.36   1.61   1.36]
   [  8.59  -4.49   0.96  -7.52]
   [ -9.71  11.59   9.44  -0.63]]

  [[  4.26  -0.97  -5.39  -4.88]
   [ -3.52   1.46  -4.64  -0.64]
   [  3.35   1.5   -0.7   -3.52]]

  [[ -0.81  -0.48   2.7   -0.7 ]
   [  4.39   5.44  -0.69  -0.  ]
   [ -4.91  -4.99  -3.57  -0.71]]

  [[  2.71  -0.3    0.27   1.74]
   [ -0.05  -2.55   0.61   3.96]
   [ -0.34  -2.     1.25  -0.48]]]


 [[[  0.08  -0.88   0.74   3.93]
   [  0.07  -1.81  -0.9    1.9 ]
   [  0.27   3.89   3.82   1.74]]

  [[  0.43  -4.29  -0.39   6.95]
   [  5.09   2.43   1.83   4.54]
   [  0.14  -7.45  -4.28  -0.24]]

  [[  2.95  -2.09  -1.98   0.19]
   [ -0.33   4.38   0.86   0.56]
   [  2.71   4.85  -0.27  -1.8 ]]

  [[ -2.93   4.77   0.29  -3.84]
   [  1.79   1.6    8.33  -1.9 ]
   [  2.76   1.2   -0.29  -3.25]]

  [[ -0.94  -1.3    2.57  -1.49]
   [ -1.19   3.48   0.44  -2.52]
   [  0.53  -4.     5.45   3.08]]]]
"""

correct_dw = """
[[[[  3.74  -9.07]
   [  7.03   2.58]
   [  9.39 -14.35]]

  [[ -1.12  11.87]
   [ -4.57  -1.78]
   [-22.21  -2.8 ]]

  [[  5.65  -7.41]
   [ -7.85  -1.11]
   [-16.2   -3.72]]]


 [[[-19.12  -0.13]
   [  5.67 -13.76]
   [-14.39   0.65]]

  [[  5.65  -7.24]
   [-12.93   3.91]
   [-15.52  24.28]]

  [[  4.53   9.18]
   [ -0.4   -6.56]
   [ -8.19 -10.36]]]


 [[[ -3.63   4.15]
   [  5.29   3.28]
   [  2.51  -3.16]]

  [[  3.76  23.19]
   [ 11.21  -4.39]
   [ -2.08   1.53]]

  [[  7.2   -9.49]
   [ -3.41  10.09]
   [ -1.91   3.68]]]]
"""

correct_db = """
[0.47 1.8 ]
"""

if __name__ == '__main__':


    # cs231 conv net assignment2!!!!
    N = 4
    C = 3  # previous filters of incoming image
    H, W = 5, 5
    F = 2  # number of filters to be applied to incoming image
    WW, HH = 3, 3


    np.random.seed(231)

    xcs = np.random.randn(N, C, H, W)
    # x = (H, W, C, N)
    x = np.transpose(xcs, (2, 3, 1, 0))

    wcs = np.random.randn(F, C, HH, WW)
    # w = (HH, WW, C, F)
    w = np.transpose(wcs, (2, 3, 1, 0))


    b = np.random.randn(F, 1)

    doutcs = np.random.randn(N, F, H, W)  # (N, F, H, W)
    dout = np.transpose(doutcs, (2, 3, 1, 0))

    # 0.418  1.397 -1.786 -0.709 -0.075

    input_shape = H, W, C

    conv_param = {'stride': 1, 'pad': 'same'}
    input_shape = (H, W, C)

    conv = Conv2D(
        input_shape=input_shape,
        filters=F,
        kernel_size=HH,
        stride=conv_param['stride'],
        padding=conv_param['pad'],
        activation=linear,
    )

    conv.prepare_params(input_shape)
    conv.layer_id = 2

    conv.w = w
    conv.b = b

    out = conv(x)
    #print(out)

    dout = conv.backward(dout)
    dw = conv.dw
    db = conv.db
